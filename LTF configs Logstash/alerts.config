input {
    http {}
}

filter {
    grok {
        match => {"message" => "%{GREEDYDATA}watcher_alerting_logentry-%{WORD:isalert}-%{WORD:alert_type}-{results=\[\{%{GREEDYDATA:results}\}\]\}"}
    }

    mutate {
        remove_field => ["message"]
    }

    if [isalert] == "alert" {
        split {
              field => "results"
              terminator => "}, {"
        }
    } else {
        drop {}
    }

    kv {
        source => "results"
        field_split => ", "
    }

    if [alert_type] == "process_memory" {
        grok { match => {"key" => "%{GREEDYDATA:hostname}\|%{GREEDYDATA:processname}"} }
        mutate {add_field => {"Hex_AlertText" => "Hostname:%{hostname} Process:%{processname} memory rss utilization at %{value} (range 0 to 1)"}}
    }

    if [alert_type] == "process_cpu" {
        grok { match => {"key" => "%{GREEDYDATA:hostname}\|%{GREEDYDATA:processname}"} }
        mutate {add_field => {"Hex_AlertText" => "Hostname:%{hostname} Process:%{processname} cpu utilization at %{value} (range 0 to 1)"}}
    }

    if [alert_type] == "memory" {
        mutate { add_field => {"hostname" => "%{key}"} }
        mutate {add_field => {"Hex_AlertText" => "Hostname:%{hostname} memory utilization at %{value} (range 0 to 1)"}}
    }

    if [alert_type] == "cpu" {
        mutate { add_field => {"hostname" => "%{key}"} }
        mutate {add_field => {"Hex_AlertText" => "Hostname:%{hostname} cpu utilization at %{value} (range 0 to 1)"}}
    }

    if [alert_type] == "filesystem" {
        grok { match => {"key" => "%{GREEDYDATA:hostname}\|%{GREEDYDATA:Hex_filesystem}"} }
        mutate {add_field => {"Hex_AlertText" => "Hostname:%{hostname} Filesystem:%{Hex_filesystem} filesystem utilization at %{value} (range 0 to 1)"}}
    }

    mutate {
        add_field => {
                "Hex_id" => "%{alert_type}-%{key}"
                "Hex_SourceTool" => "Beats"
                "Hex_Category" => "DataCenter Group"
                "Hex_SourceHost" => "%{hostname}"
                "Hex_LastUpdated" => "%{@timestamp}"
        }
    }
    mutate {
        gsub => [
            "Hex_id", "/", "~",
            "Hex_id", "[\\]", "~"
        ]
    }
}

output {
    elasticsearch {
        hosts => [":9200"]
        manage_template => false
        index => "alerts-index"
        user => "elastic"
        password => ""
        action => "update"
        doc_as_upsert => true
        document_id => "%{Hex_id}"
        script => '
            ctx._source.Hex_AlertText = params.event.get("Hex_AlertText");
            ctx._source.results = params.event.get("results");
            ctx._source.value = params.event.get("value");
            ctx._source.Hex_LastUpdated = params.event.get("@timestamp");
        '
    }
}
